// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shared.Infrastructure;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250701165549_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.DeliveryMode", b =>
                {
                    b.Property<Guid>("DeliveryModeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Mode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DeliveryModeId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DeliveryModeId"), false);

                    b.ToTable("DeliveryMode", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int?>("CollegeId")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DepartmentHead")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("FacultyId")
                        .HasMaxLength(255)
                        .HasColumnType("int");

                    b.Property<string>("Fax")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneExt")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DepartmentId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DepartmentId"), false);

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.DepartmentDeliveryMode", b =>
                {
                    b.Property<Guid>("DepartmentDeliveryModeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DeliveryModeId")
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DepartmentRequestTypeId")
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentDeliveryModeId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DepartmentDeliveryModeId"), false);

                    b.HasIndex("DeliveryModeId");

                    b.HasIndex("DepartmentRequestTypeId");

                    b.ToTable("DepartmentDeliveryMode", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.DepartmentRequestPaymentChannel", b =>
                {
                    b.Property<Guid>("DepartmentRequestPaymentChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("DepartmentRequestTypeId")
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PaymentChannelId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentRequestPaymentChannelId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DepartmentRequestPaymentChannelId"), false);

                    b.HasIndex("DepartmentRequestTypeId");

                    b.ToTable("DepartmentRequestPaymentChannel", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.DepartmentRequestType", b =>
                {
                    b.Property<Guid>("DepartmentRequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DepartmentRequestType");

                    b.Property<bool>("AcceptPayment")
                        .HasColumnType("bit");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<Guid>("RequestTypeId")
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SISDeptId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("DepartmentRequestTypeId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DepartmentRequestTypeId"), false);

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RequestTypeId");

                    b.ToTable("DepartmentRequestType", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.DepartmentSetting", b =>
                {
                    b.Property<Guid>("DepartmentSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CurrentHod")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("CurrentHOD");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DeptId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Logo")
                        .HasMaxLength(255)
                        .HasColumnType("binary(255)")
                        .IsFixedLength();

                    b.Property<string>("Office")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("PortalStatus")
                        .HasColumnType("bit");

                    b.Property<string>("PortalStatusMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ThankYouMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("WorkingHours")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("DepartmentSettingsId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DepartmentSettingsId"), false);

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentSettings");
                });

            modelBuilder.Entity("Shared.Domain.Models.FormFields", b =>
                {
                    b.Property<Guid>("FormFieldsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FormFieldsId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("FieldTips")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("RequestTypeFormStepId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Width")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FormFieldsId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("FormFieldsId"), false);

                    b.HasIndex("RequestTypeFormStepId");

                    b.ToTable("FormFields", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.FormSelectOptions", b =>
                {
                    b.Property<Guid>("FormSelectOptionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FormSelectOptionsId");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid>("FormFieldsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("FormFieldsId");

                    b.Property<string>("OptionName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.HasKey("FormSelectOptionsId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("FormSelectOptionsId"), false);

                    b.HasIndex("FormFieldsId");

                    b.ToTable("FormSelectOptions", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.IdentificationCard", b =>
                {
                    b.Property<Guid>("IdentificationCardId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("IdentificationCardFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("IdentificationCardNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IdentificationCardType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdentificationCardId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdentificationCardId"), false);

                    b.ToTable("IdentificationCard", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("MessageID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DepartmentEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("DepartmentRequestTypeId")
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentInvoice")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("MessageId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("MessageId"), false);

                    b.HasIndex("DepartmentRequestTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Message", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<Guid?>("DepartmentRequestTypeNavigationDepartmentRequestTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NotficationLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubscribedDepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("NotificationId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentRequestTypeNavigationDepartmentRequestTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Shared.Domain.Models.ProgrammeRead", b =>
                {
                    b.Property<Guid>("ProgrammeReadId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdmissionYear")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("FullNameOnCertificate")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GraduateType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraduationYear")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("IndexNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ProgrammeId")
                        .HasColumnType("int");

                    b.Property<string>("ProgrammeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StudentNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ThesisTopic")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProgrammeReadId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("ProgrammeReadId"), false);

                    b.ToTable("ProgrammeRead", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.Request", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanEditRequest")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DepartmentRequestTypeId")
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IsDeleted")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("isDeleted");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RequestId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("RequestId"), false);

                    b.HasIndex("DepartmentRequestTypeId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.RequestTransaction", b =>
                {
                    b.Property<Guid>("RequestTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DeliveryModeOption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProcessingStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProgrammeOfStudy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RequestId")
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionPaymentRef")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("RequestTransactionId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("RequestTransactionId"), false);

                    b.HasIndex("RequestId");

                    b.ToTable("RequestTransaction", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.RequestType", b =>
                {
                    b.Property<Guid>("RequestTypeId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoutingtoView")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Steps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("RequestTypeId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("RequestTypeId"), false);

                    b.ToTable("RequestType", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.RequestTypeFormStep", b =>
                {
                    b.Property<Guid>("RequestTypeFormStepId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RequestTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StepDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestTypeFormStepId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("RequestTypeFormStepId"), false);

                    b.HasIndex("RequestTypeId");

                    b.ToTable("RequestTypeFormStep", (string)null);
                });

            modelBuilder.Entity("Shared.Domain.Models.RequestedReferee", b =>
                {
                    b.Property<Guid>("RequestedRefereeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<string>("RecommendationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefereeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RejectedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RequestedRefereeId");

                    b.ToTable("RequestedReferees");
                });

            modelBuilder.Entity("Shared.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfResidence")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IndexNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsProfileVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OtherNames")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("PassportPicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shared.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shared.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shared.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Domain.Models.DepartmentDeliveryMode", b =>
                {
                    b.HasOne("Shared.Domain.Models.DeliveryMode", "DeliveryMode")
                        .WithMany("DepartmentDeliveryModes")
                        .HasForeignKey("DeliveryModeId")
                        .HasConstraintName("FK_DeliveryMode_DepartmentDeliveryMode");

                    b.HasOne("Shared.Domain.Models.DepartmentRequestType", "DepartmentRequestTypeNavigation")
                        .WithMany("DepartmentDeliveryModes")
                        .HasForeignKey("DepartmentRequestTypeId")
                        .HasConstraintName("FK_DepartmentRequestType_DepartmentDeliveryMode");

                    b.Navigation("DeliveryMode");

                    b.Navigation("DepartmentRequestTypeNavigation");
                });

            modelBuilder.Entity("Shared.Domain.Models.DepartmentRequestPaymentChannel", b =>
                {
                    b.HasOne("Shared.Domain.Models.DepartmentRequestType", null)
                        .WithMany("DepartmentRequestPaymentChannel")
                        .HasForeignKey("DepartmentRequestTypeId");
                });

            modelBuilder.Entity("Shared.Domain.Models.DepartmentRequestType", b =>
                {
                    b.HasOne("Shared.Domain.Models.Department", null)
                        .WithMany("DepartmentRequestTypes")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Shared.Domain.Models.RequestType", "RequestType")
                        .WithMany()
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestType");
                });

            modelBuilder.Entity("Shared.Domain.Models.DepartmentSetting", b =>
                {
                    b.HasOne("Shared.Domain.Models.Department", "Department")
                        .WithMany("DepartmentSettings")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Shared.Domain.Models.FormFields", b =>
                {
                    b.HasOne("Shared.Domain.Models.RequestTypeFormStep", null)
                        .WithMany("FormFields")
                        .HasForeignKey("RequestTypeFormStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Domain.Models.FormSelectOptions", b =>
                {
                    b.HasOne("Shared.Domain.Models.FormFields", null)
                        .WithMany("FormSelectOptions")
                        .HasForeignKey("FormFieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Domain.Models.Message", b =>
                {
                    b.HasOne("Shared.Domain.Models.DepartmentRequestType", "DepartmentRequestTypeNavigation")
                        .WithMany()
                        .HasForeignKey("DepartmentRequestTypeId");

                    b.HasOne("Shared.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DepartmentRequestTypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Domain.Models.Notification", b =>
                {
                    b.HasOne("Shared.Domain.Models.Department", null)
                        .WithMany("Notifications")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Shared.Domain.Models.DepartmentRequestType", "DepartmentRequestTypeNavigation")
                        .WithMany()
                        .HasForeignKey("DepartmentRequestTypeNavigationDepartmentRequestTypeId");

                    b.HasOne("Shared.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("DepartmentRequestTypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shared.Domain.Models.Request", b =>
                {
                    b.HasOne("Shared.Domain.Models.DepartmentRequestType", "DepartmentRequestTypeNavigation")
                        .WithMany("Requests")
                        .HasForeignKey("DepartmentRequestTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_DepartmentRequestType_Requ14");

                    b.Navigation("DepartmentRequestTypeNavigation");
                });

            modelBuilder.Entity("Shared.Domain.Models.RequestTransaction", b =>
                {
                    b.HasOne("Shared.Domain.Models.Request", "Request")
                        .WithMany("RequestTransactions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Request_RequestTransaction");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Shared.Domain.Models.RequestTypeFormStep", b =>
                {
                    b.HasOne("Shared.Domain.Models.RequestType", null)
                        .WithMany("RequestTypeFormStep")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Domain.Models.DeliveryMode", b =>
                {
                    b.Navigation("DepartmentDeliveryModes");
                });

            modelBuilder.Entity("Shared.Domain.Models.Department", b =>
                {
                    b.Navigation("DepartmentRequestTypes");

                    b.Navigation("DepartmentSettings");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Shared.Domain.Models.DepartmentRequestType", b =>
                {
                    b.Navigation("DepartmentDeliveryModes");

                    b.Navigation("DepartmentRequestPaymentChannel");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Shared.Domain.Models.FormFields", b =>
                {
                    b.Navigation("FormSelectOptions");
                });

            modelBuilder.Entity("Shared.Domain.Models.Request", b =>
                {
                    b.Navigation("RequestTransactions");
                });

            modelBuilder.Entity("Shared.Domain.Models.RequestType", b =>
                {
                    b.Navigation("RequestTypeFormStep");
                });

            modelBuilder.Entity("Shared.Domain.Models.RequestTypeFormStep", b =>
                {
                    b.Navigation("FormFields");
                });
#pragma warning restore 612, 618
        }
    }
}
