@page "/new-request/{departmentRequestTypeId}"
@attribute [Authorize]
@inject MessageService MessageService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApiService ApiService
@inject CookieService CookieService 
@inject SISAPIService SISAPIService 
@inject NewRequestFormState NewRequestFormState 
@inject IJSRuntime IJSRuntime

<div class="min-h-auto">
 @if (!string.IsNullOrEmpty(MessageService.AlertMessage))
    {
        <div class="flex row justify-center items-center">
            <Alert Variant="@MessageService.AlertType" Title="@MessageService.AlertMessage" />
        </div>
    }

    <h3 class="mb-12 ml-24">New Request Type @departmentRequestTypeName</h3>
    <div class="max-w-4xl mx-auto p-6 h-auto py-4 bg-white rounded-xl shadow-lg">
        <div class="max-w-2xl mx-auto">
            <!-- Progress Steps -->
            <div class="flex flex-row justify-center items-center gap-2 mb-8">
                    <div class="flex justify-between items-center w-full mt-4  gap-2">
                        <span class="text-[30px]">Please fill in the details</span>
                    </div>
            </div>

                    <form>
                    @if (isLoading)
                    {
                        <div class="mb-3 flex justify-center">
                            <Spinner />
                        </div>
                    }else{
                        @foreach (var field in departmentRequestTypeFormFields)
                        {
                        <div class="grid grid-cols-2 md:grid-cols-@(string.Equals(field.Width, "100") ? "1" : string.Equals(field.Width, "50") ? "2" : "4") gap-x-20 gap-y-6 mb-8"> 
                            <div>
                                <label for="label" class="block mb-1 font-medium">@field.Label<span class="text-red-500">*</span></label>
                                <input type=@field.InputType name=@field.Label id=@field.Label placeholder=@field.Placeholder class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                            </div>

                         </div>
                        }
                        <div class="mb-4 mt-8 text-center">
                            <button type="button" @onclick="NavigateToRequestSummary" class="block w-full py-3 text-white border-transparent hover:bg-actionPrimary-hover btn bg-actionPrimary-default focus:ring focus:ring-actionPrimary-active/30 dark:border-actionPrimary-default">
                                Next
                            </button>
                </div>
                    }
                    
                    </form>
        </div>
</div>
</div>


@code {

    [Parameter] public string? departmentRequestTypeId { get; set; }

    private ClaimsPrincipal? _currentUser;
    private bool isLoading = false;
    private string userId; 
    private string departmentRequestTypeName; 
    private DepartmentRequestType? departmentRequestType = new(); 
    private List<Programme> programmes = new();

    private string? selectedDepartment;
    private string? selectedDeliveryMode;
    private string? selectedRecipientInfo;
    private int days = 3;

    private List<FormFields> departmentRequestTypeFormFields = new(); 
    private List<string> dynamicFormFields = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUser = authState.User;
        userId = _currentUser.FindFirst("Sub")?.Value;

        isLoading = true;
        await GetDepartmentRequestType();
        await FetchForm();
        await FetchDepartmentProgrammes();
        isLoading = false;

        try
        {
            selectedDepartment = await CookieService.Get("selected_department_new_request");
            selectedDeliveryMode = await CookieService.Get("selected_delivery_mode_new_request");
            selectedRecipientInfo = await CookieService.Get("selected_recipient_info_new_request");
        } 
        catch(Exception ex)
        {
            Console.WriteLine($"error retrieving data from cache on new request page: {ex.Message}");
        }
    }

        private async Task FetchForm()
        {
            var response = await ApiService.FetchDepartmentRequestTypeFormFields(departmentRequestTypeId);
            if (response.Status)
            {
                departmentRequestTypeFormFields = response.formFields;
                foreach(var item in departmentRequestTypeFormFields)
                {
                    var itemString = item.Label.ToString().Replace(" ", "");
                    dynamicFormFields.Add(itemString);
                }
            }
         }

         private async Task GetSubmittedFormData()
         {

            foreach(var item in dynamicFormFields) 
            {
                var valueData = await CookieService.GetFormFieldData(item);
                Console.WriteLine($"label_id => value data is: {item} -> {valueData}");
            }
         }

        private async Task CachedFormData()
        {
            await CookieService.Set("selected_department_new_request", selectedDepartment, days);
            await CookieService.Set("selected_delivery_mode_new_request", selectedDeliveryMode, days);
            await CookieService.Set("selected_recipient_info_new_request", selectedRecipientInfo, days);
        }

    private async Task FetchDepartmentProgrammes()
    {
        var userProgrammeReadList = await ApiService.GetApplicantProgrammesRead(userId);
        foreach(var userProgrammeRead in userProgrammeReadList)
        {
            if (userProgrammeRead != null)
            {
                var response = await SISAPIService.GetProgrammeDetails(userProgrammeRead.ProgrammeId);
                if (response.Status) programmes = response.programmes;
            }
        }
    }

    private async Task GetDepartmentRequestType()
    {
        departmentRequestType = await ApiService.GetDepartmentRequestTypeById(departmentRequestTypeId!);
        if (departmentRequestType != null) departmentRequestTypeName = departmentRequestType.RequestType.Name;
    }

    private async Task NavigateToRequestSummary()
    {
        await GetSubmittedFormData();
        Console.WriteLine("caching and moving to request-summary/depid");
        NavigationManager.NavigateTo($"/request-summary/{departmentRequestTypeId}");
    }

}


