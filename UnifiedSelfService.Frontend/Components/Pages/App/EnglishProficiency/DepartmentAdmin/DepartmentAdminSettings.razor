@page "/department-settings/general-information"
@attribute [Authorize]
@inject MessageService MessageService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApiService ApiService
@inject SISAPIService SISAPIService 

<div class="min-h-auto">
    @if (!string.IsNullOrEmpty(MessageService.AlertMessage))
    {
    <div class="flex row justify-center items-center">
        <Alert Variant="@MessageService.AlertType" Title="@MessageService.AlertMessage" />
    </div>
    }
  
    <div class="card max-w-6xl mx-auto bg-white rounded-md p-8">
         
      <h4 class="flex row justify-start items-start mb-8">Department Settings</h4>
      <div class="max-w-4xl mx-auto mb-12 flex flex-col justify-center items-center gap-2 ">
        <div class="flex items-center ">
                <div class="w-8 h-8 rounded-full @(string.Equals(state_tracker, "general_settings") ? "bg-green-600 border-green-600 " : "bg-gray-300") text-white border-2  flex items-center justify-center">1</div>
                <div class="h-[2px] md:w bg-gray-300 mx-2" style="width: 700px;"></div>
                <div class="w-8 h-8 rounded-full flex border-2 @(string.Equals(state_tracker, "administrative_settings") ? "bg-green-600 border-green-600 text-white" : "bg-gray-300") items-center justify-center">2</div>
        </div>
            <div class="flex justify-between items-center w-full">
                <span class="mr-8 text-[15px]">General Settings</span>
                <span class="mr-8 text-[15px]">Administrative Settings</span>
            </div>
        </div>

        <div class="mb-8">
            <h4 class="text-start mb-4 text-gray">@(string.Equals(state_tracker, "general_settings") ? "General Settings" : "Administrative Settings")</h4>
            <p>Please fill out the details</p>
        </div>
        
        <div class="mt-4">
            @if (string.IsNullOrEmpty(department.DepartmentName))
            {
                <div class="mb-3 flex justify-center">
                    <Spinner />
                </div>
            }else
            {
                @if (state_tracker == "general_settings")
                {
                <form enctype="multipart/form-data">

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-44 gap-y-6 mb-8"> 
                        <div>
                            <label for="departmentName" class="block mb-1 font-medium">Department Name<span class="text-red-500">*</span></label>
                            <InputText id="departmentName" @bind-Value="DepartmentName" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                        </div>
                        
                        <div>
                            <label for="departmentId" class="block mb-1 font-medium">Department Id<span class="text-red-500">*</span></label>
                            <InputText id="departmentId" @bind-Value="DepartmentId" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md"/>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-44 gap-y-6 mb-8"> 
                        <div>
                            <label for="departmentLogo" class="block mb-1 font-medium">Department Logo<span class="text-red-500">*</span></label>
                            <InputFile id="department_logo" OnChange="HandleDepartmentLogoUpload" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" placeholder="" />
                        </div>
                        
                        <div>
                            <label for="department_hod" class="block mb-1 font-medium">Department HOD<span class="text-red-500">*</span></label>
                            <InputText id="department_hod" @bind-Value="DepartmentHOD" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                        </div>
                    </div>
                   
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-44 gap-y-6 mb-8"> 
                        <div>
                            <label for="department_logo" class="block mb-1 font-medium">Department Email<span class="text-red-500">*</span></label>
                            <InputText id="department_logo" @bind-Value="DepartmentEmail"  class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                        </div>
                        
                        <div>
                            <label for="department_phone" class="block mb-1 font-medium">Department Telephone<span class="text-red-500">*</span></label>
                            <InputText id="department_phone" @bind-Value="DepartmentTelephone"  class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                        </div>
                    </div>
                </form>
                }else if(string.Equals(state_tracker, "administrative_settings"))
                {
                <form enctype="multipart/form-data">

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-44 gap-y-6 mb-8"> 
                        <div>
                            <label for="department_hod-signature" class="block mb-1 font-medium">Department HOD Signature<span class="text-red-500">*</span></label>
                            <input type="file" id="department_hod_signature" @bind="DepartmentHODSignature" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" placeholder="" />
                        </div>
                        
                        <div>
                            <label for="department_stamp" class="block mb-1 font-medium">Department Stamp<span class="text-red-500">*</span></label>
                            <input type="file" id="department_stamp" @bind="DepartmentStamp" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" placeholder="" />
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-44 gap-y-6 mb-8"> 
                        <div>
                            <label for="department_working_hours" class="block mb-1 font-medium">Department Working Hours<span class="text-red-500">*</span></label>
                            <InputText id="department_working_hours" @bind-Value="DepartmentWorkingHours" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" placeholder="" />
                        </div>

                       <div class="relative">
                            <label for="department_portal_status" class="block mb-1 font-medium">Portal Status<span class="text-red-500">*</span></label>
                            <select class="w-full border-2 border-gray-300 rounded p-2.5 appearance-none bg-white" @bind="DepartmentPortalStatus">
                                <option>Select</option>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                            </select>
                        </div>
                    </div>
                   
                    <div class="grid grid-cols-1 md:grid-cols-1 gap-x-44 gap-y-6 mb-8"> 
                        <div>
                            <label for="department_portal_message" class="block mb-1 font-medium">Department Portal Message<span class="text-red-500">*</span></label>
                            <InputText id="department_portal_message" @bind-Value="DepartmentPortalMessage" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" placeholder="We are closed because of the vacation." />
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-1 gap-x-44 gap-y-6 mb-8"> 
                        <div>
                            <label for="department_portal_message" class="block mb-1 font-medium">Thank You Message<span class="text-red-500">*</span></label>
                            <InputText id="department_thankyou_message" @bind-Value="DepartmentThankYouMessage" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" placeholder="Department of Computer Science. Thank you for patronizing us."/>
                        </div>
                    </div>

                </form>
                }
            }

            <div class="flex justify-around mt-8">
                @if (state_tracker == "administrative_settings")
                {
                <button type="button" @onclick="SaveGeneralSettings" class="px-4 py-2 border-2 border-green-700 text-green-700 rounded hover:bg-green-50 transition-colors">
                    Previous
                </button>
                }

                <button type="button" @onclick="SaveAdministrativeSettings" class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-6 rounded-md">
                  @(string.Equals(state_tracker, "general_settings") ? "Next" : "Save Settings") 
                </button>

            </div>
        </div>

</div>
</div>


@code {

    private User? user;
    private string? userDepartmentId;
    private ClaimsPrincipal? _currentUser;
    private bool isLoading = false;
    private string? userType;
    private string? userEmail;
    private string? userId;
    private string? state_tracker = "general_settings";
    
    private IBrowserFile? uploadedDepartmentLogoFile;

    private string? DepartmentName;
    private string? DepartmentId;
    private byte[]? DepartmentLogo;
    private string? DepartmentHOD;
    private string? DepartmentEmail;
    private string? DepartmentTelephone;

    private byte? DepartmentHODSignature;
    private byte? DepartmentStamp;
    private string? DepartmentWorkingHours;
    private bool DepartmentPortalStatus;
    private string? DepartmentPortalMessage;
    private string? DepartmentThankYouMessage;
    
    private Department? department = new();
    private DepartmentDTO? departmentGeneralSettingsModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUser = authState.User;
        userId = _currentUser.FindFirst("Sub")?.Value;
        userEmail = _currentUser.FindFirst("Email")?.Value;
        userType = _currentUser.FindFirst("UserType")?.Value;

        user = await ApiService.GetUserById(userId);
        userType = user.UserType.ToString();

        await FetchDepartmentDetails();
    }

    private async Task HandleDepartmentLogoUpload(InputFileChangeEventArgs e)
    {
        uploadedDepartmentLogoFile = e.File;
        using var stream = uploadedDepartmentLogoFile.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        DepartmentLogo = memoryStream.ToArray();
    }

    private async Task SaveAdministrativeSettings()
    {
        await Task.Delay(1);
        state_tracker = "administrative_settings";
    }

    private async Task SaveGeneralSettings()
    {
        await Task.Delay(1);
        state_tracker = "general_settings";


    }

    private async Task FetchDepartmentDetails()
    {
        var response = await SISAPIService.GetDepartmentDetails(9);
         if (response.Status) department = response.department;
         if (response.Status && response.department is not null)
        {
            department = response.department;
            DepartmentName = department.DepartmentName;
            DepartmentId = department.DepartmentId.ToString();
            DepartmentHOD = department.DepartmentHead;
            DepartmentEmail = department.Email;
            DepartmentTelephone = department.PhoneExt;
        }
    }

    private async Task HandleGeneralDepartmentSettingsForm()
    {   
        isLoading = true;
        var newDepartmentDTO = new DepartmentDTO
        {
            DepartmentName = departmentGeneralSettingsModel.DepartmentName,
            DepartmentHead = departmentGeneralSettingsModel.DepartmentHead,
            Phone = departmentGeneralSettingsModel.Phone,
            Email = departmentGeneralSettingsModel.Email,
            CreatedBy = userEmail
        };  

        @* var response = await SISAPIService.UpdateDepartmentInfo(newDepartmentDTO); *@
        @* Console.WriteLine($"response from creating new department: {response.Status} {response.Message}"); *@

        @* if (response.Status) *@
        @* { *@
        @*     isLoading = false; *@
        @*     MessageService.AlertMessage = $"{response.Message}"; *@
        @*     MessageService.AlertType = "success"; *@
        @*     NavigationManager.NavigateTo("/dev/all-departments"); *@
        @* } *@
        @* else *@
        @* { *@   
        @*     if (string.IsNullOrEmpty(newDepartmentModel.DepartmentName)) *@
        @*     { *@
        @*         MessageService.AlertMessage = "Department name can not be empty"; *@
        @*         MessageService.AlertType = "warning"; *@
        @*     }else *@
        @*     { *@
        @*         isLoading = false; *@
        @*         MessageService.AlertMessage = response.Message; *@
        @*         MessageService.AlertType = "danger"; *@
        @*     } *@
        @* } *@
    }

    private Dictionary<string, object> AdditionalCardClass2 = new Dictionary<string, object>
    {
        {"class", "w-[500px] max-w-[700px] gap-4 p-4 border-2 bg-white"},
    };

}
