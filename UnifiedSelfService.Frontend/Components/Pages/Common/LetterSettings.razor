@page "/letter-settings/{departmentRequestTypeId}/{settingsType}"
@attribute [Authorize]
@inject MessageService MessageService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApiService ApiService
@inject SISAPIService SISAPIService 

<div class="mt-4 max-w-[1380px] rounded-md mx-auto">

        <div>
        @if (!string.IsNullOrEmpty(MessageService.AlertMessage))
        {
            <div>
                <Alert Variant="@MessageService.AlertType" Title="@MessageService.AlertMessage" />
            </div>
        }
        </div>

        <div class="mb-3 flex flex-row justify-between">
            @if (departmentRequestType.RequestType != null)
            {
            <h5 class="text-3xl font-semibold text-gray-700 dark:text-gray-100 mb-2 mt-2">@departmentRequestType.RequestType.Name</h5>
            }

            @if (userType == "DepartmentAdmin")
            {
            <div class="flex flex-row justify-between">
                <div>
                    <button @onclick="PreviewForm" type="button" class="block w-32 py-2 text-white border-transparent hover:bg-actionPrimary-hover btn bg-actionPrimary-default focus:ring focus:ring-actionPrimary-active/30 dark:border-actionPrimary-default">
                        Preview Form
                    </button>
               </div>
            </div>
            }
        </div>

    <div class="bg-white p-8 rounded-md mx-auto mt-12">
        <div class="mb-6 ">
            <div class="flex justify-between items-center gap-4 mb-6">
                <div class="relative flex-1 max-w-md">
                    <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                        <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>
                    <input 
                        type="search" 
                        class="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-1 focus:ring-green-500"
                        placeholder="Search..."
                        @bind="searchQuery"
                        @bind:event="oninput"
                    />
                </div>
            </div>

            <div class="overflow-x-auto z-10">
                <table class="min-w-full">
                    <thead>
                        <tr class="border-b border-gray-100">
                            <th class="w-12 py-3 px-4">
                                <input 
                                    type="checkbox" 
                                    class="rounded border-gray-300 text-green-600 focus:ring-green-500"
                                />
                            </th>
                            <th class="text-left py-3 px-4 text-sm font-medium">#</th>
                            @if (string.Equals(settingsType, "form-settings"))
                            {
                                <th class="text-left py-3 px-4 text-sm font-medium">Name</th>
                                <th class="text-left py-3 px-4 text-sm font-medium">Input Type</th>
                                @* <th class="text-left py-3 px-4 text-sm font-medium">Width</th> *@
                                <th class="text-left py-3 px-4 text-sm font-medium">Is Required</th>
                                <th class="text-left py-3 px-4 text-sm font-medium">Action</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @if (string.Equals(settingsType, "form-settings"))
                        {
                                @foreach (var (field, index) in departmentRequestTypeFormFields.Select((field, index) => (field, index)))
                                {
                                <tr class="border-b border-gray-50 hover:bg-[#FBFBFB]">
                                    <td class="py-3 px-4">
                                        <input type="checkbox" class="rounded border-gray-300 text-green-600 focus:ring-green-500" />
                                    </td>
                                    
                                    <td class="py-3 px-4 text-sm">@(index+1)</td>
                                    <td class="py-3 px-4 text-sm">@field.Label</td>
                                    <td class="py-3 px-4 text-sm">@field.InputType</td>
                                    @* <td class="py-3 px-4 text-sm">@field.Width</td> *@
                                    <td class="py-3 px-4 text-sm">@field.IsRequired</td>
                                    <td class="py-3 px-4 text-sm">
                                        <button type="button" @onclick="() => DeleteField(field.FormFieldsId.ToString())" class="btn bg-actionPrimary-success">Delete</button>
                                        @* <button type="button" @onclick="EditField" class="btn bg-actionPrimary-default text-white">Edit</button> *@
                                    </td>
                                </tr>
                                }
                        } 
                    </tbody>
                </table>

            </div>

        </div>

        <div class="flex justify-center">
            <button @onclick="toggleModal"  type="button" class="block w-32 py-2 text-white border-transparent hover:bg-actionPrimary-hover btn bg-actionPrimary-default focus:ring focus:ring-actionPrimary-active/30 dark:border-actionPrimary-default">
                <Icon IconName="@Utils.CommonIcons.File" IconColor="white" IconSize="20px;" />
                Add Input
            </button>

        </div>
    </div>

@if (isModalOpened)
{
    <div class="card max-w-2xl mx-auto bg-white rounded-md p-8 shadow-md z-40" style="top: 0px;">
        
        <div class="flex row justify-between">
          <h4 class="flex row justify-start items-start mb-8">Generate Input Form</h4>
          <h2 class="mx-4 cursor-pointer" @onclick="toggleModal">X</h2>
        </div>
          <div class="max-w-2xl mx-auto mb-12 flex flex-col justify-center items-center gap-2"></div>
        
            <div class="mb-8">
            </div>
            
            <div class="mt-4">
                    <form enctype="multipart/form-data">

                        <div class="grid grid-cols-1 md:grid-cols-1 gap-x-20 gap-y-6 mb-8"> 
                            <div>
                                <label for="type" class="block mb-1 font-medium">Type<span class="text-red-500">*</span></label>
                                <select @bind="Type" class="w-full py-3 text-sm border-gray-200 rounded-lg placeholder:text-sm placeholder:text-gray-300 bg-gray-50/5 dark:bg-zinc-700/50 dark:border-zinc-500 dark:focus:border-zinc-300 dark:text-gray-100 dark:placeholder:text-zinc-100/60 focus:border-actionPrimary-active">
                                @foreach(var option in FormOptions)
                                {
                                    <option value="@option">@option</option>
                                }
                            </select>
                            </div>
                     </div>


                    <div class="grid grid-cols-1 md:grid-cols-1 gap-x-20 gap-y-6 mb-8"> 
                            <div>
                                <label for="isRequired" class="block mb-1 font-medium">Is Required<span class="text-red-500">*</span></label>
                                <select @bind="IsRequired" class="w-full py-3 text-sm border-gray-200 rounded-lg placeholder:text-sm placeholder:text-gray-300 bg-gray-50/5 dark:bg-zinc-700/50 dark:border-zinc-500 dark:focus:border-zinc-300 dark:text-gray-100 dark:placeholder:text-zinc-100/60 focus:border-actionPrimary-active">
                                <option value="true">Yes</option>
                                <option value="false">No</option>
                            </select>
                            </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-1 gap-x-20 gap-y-6 mb-8"> 
                            <div>
                                <label for="label" class="block mb-1 font-medium">Label<span class="text-red-500">*</span></label>
                                <InputText id="text" @bind-Value="Label"  class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                            </div>
                     </div>

                    <div class="grid grid-cols-1 md:grid-cols-1 gap-x-20 gap-y-6 mb-8"> 
                            <div>
                                <label for="label" class="block mb-1 font-medium">Placeholder<span class="text-red-500">*</span></label>
                                <InputText id="text" @bind-Value="Placeholder"  class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                            </div>
                     </div>

                    <div class="grid grid-cols-1 md:grid-cols-1 gap-x-20 gap-y-6 mb-8"> 
                            <div>
                                <label for="label" class="block mb-1 font-medium">Width<span class="text-red-500">*</span></label>
                                <InputSelect @bind-Value="Width" class="w-full py-3 text-sm border-gray-200 rounded-lg placeholder:text-sm placeholder:text-gray-300 bg-gray-50/5 dark:bg-zinc-700/50 dark:border-zinc-500 dark:focus:border-zinc-300 dark:text-gray-100 dark:placeholder:text-zinc-100/60 focus:border-actionPrimary-active">
                                <option value="30">33%</option>
                                <option value="50">50%</option>
                                <option value="100">100%</option>
                            </InputSelect>
                            </div>
                     </div>

                    </form>

                <div class="flex justify-around mt-8">
                    <button type="button" @onclick="AddField" class="block w-40 py-2 text-white border-transparent hover:bg-actionPrimary-hover btn bg-actionPrimary-default focus:ring focus:ring-actionPrimary-active/30 dark:border-actionPrimary-default">
                      Add Input 
                    </button>
                </div>
            </div>
        </div>
}

@if (previewForm)
{
    <div class="card max-w-2xl mx-auto bg-white rounded-md p-8 shadow-md z-40" style="top: 0px;">
        <div class="flex row justify-between">
          <h4 class="flex row justify-start items-start mb-8">Form Preview</h4>
          <h2 class="mx-4 cursor-pointer" @onclick="toggleFormPreview">X</h2>
        </div>
          <div class="max-w-2xl mx-auto mb-12 flex flex-col justify-center items-center gap-2"></div>
        
            <div class="mb-8">
            </div>
            
            <div class="mt-4">
                    <form enctype="multipart/form-data">

                    @foreach(var field in departmentRequestTypeFormFields)
                    {
                        int counter = 0;
                    <div class="grid md:grid-cols-@(string.Equals(field.Width, "100") ? "1" : string.Equals(field.Width, "50") ? "2" : "3") lg:@(string.Equals(field.Width, "100") ? "1" : string.Equals(field.Width, "50") ? "2" : "3")  gap-x-20 gap-y-6 mb-8"> 
                            <div>
                                <label for=$"field_{counter}" class="block mb-1 font-medium">@field.Label<span class="text-red-500">*</span></label>
                                @if (field.InputType == InputTypesEnum.text || field.InputType == InputTypesEnum.tel)
                                {
                                    <input type=@field.InputType id=$"field_{counter}"  class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                                }
                                <!-- else if(field.InputType == InputTypesEnum.select)
                                 {
                                    <select type="" id=$"field_{counter}" class="w-full py-3 text-sm border-gray-200 rounded-lg placeholder:text-sm placeholder:text-gray-300 bg-gray-50/5 dark:bg-zinc-700/50 dark:border-zinc-500 dark:focus:border-zinc-300 dark:text-gray-100 dark:placeholder:text-zinc-100/60 focus:border-actionPrimary-active">
                                    @foreach (var option in field.Options)
                                    {
                                        <option value="@subDept.DepartmentId">@subDept.DepartmentName</option>
                                    }
                                    </select>
                                 } -->

                            </div>
                     </div>
                     counter ++;
                    }

                    </form>

                <div class="flex justify-around mt-8">
                    <button type="button" @onclick="AddField" class="block w-40 py-2 text-white border-transparent hover:bg-actionPrimary-hover btn bg-actionPrimary-default focus:ring focus:ring-actionPrimary-active/30 dark:border-actionPrimary-default">
                      Add Input 
                    </button>
                </div>
            </div>
        </div>
}
</div>


@code {
    
    [Parameter] public string? departmentRequestTypeId { get; set; }
    [Parameter] public string? settingsType { get; set; }

    private User? user;
    private string? userDepartmentId;
    private ClaimsPrincipal? _currentUser;
    private bool isLoading = false;
    private string? userType;
    private string? userEmail;
    private string? userId;
    private string? searchQuery;
    private bool isModalOpened = false;
    private bool previewForm = false;

    private string? Type;
    private string? IsRequired;
    private string? Label;
    private string? Placeholder;
    private string? Width;
    private byte[]? fileHolder = Array.Empty<byte>();

    private List<string> FormOptions = new()
    {
        "text", "checkbox", "date", "email", "file", "image", "number", "password", "radio", "tel", "url", "time",
    };

    private List<FormFields> departmentRequestTypeFormFields = new(); 

    private DepartmentRequestPaymentChannel? departmentRequestPaymentChannel = new(); 
    private DepartmentRequestType? departmentRequestType = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUser = authState.User;
        userId = _currentUser.FindFirst("Sub")?.Value;
        userEmail = _currentUser.FindFirst("Email")?.Value;
        userType = _currentUser.FindFirst("UserType")?.Value;

        user = await ApiService.GetUserById(userId);
        userType = user.UserType.ToString();
        
        isLoading = true;
        await FetchDepartmentRequestType();
        await FetchForm();
        isLoading = false;

        @* MessageService.AlertType = null; *@ 
        @* MessageService.AlertMessage = null; *@

    }

    private void toggleModal()
    {
        isModalOpened = !isModalOpened;
    }

    private void toggleFormPreview()
    {
        previewForm = !previewForm;
    }

    private async Task DeleteField(string departmentRequestTypeFormFieldId)
    {
        Console.WriteLine($"department request type form field id: {departmentRequestTypeFormFieldId}");
        var response = await ApiService.DeleteDepartmentRequestTypeFormField(departmentRequestTypeFormFieldId);
        Console.WriteLine($"trying to delete the department request type form field");
        if (response.Status) 
        {
            MessageService.AlertType = "success";
            MessageService.AlertMessage = $"{response.Message}";
        }
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    private async Task AddField()
    {
        var formData = new FormFieldDTO()
        {
            Label = Label,
            InputType = Type,
            Placeholder = Placeholder,
            IsRequired = string.Equals(IsRequired, "true") ? true : false,
            Width = Width
        };

        var response = await ApiService.AddDepartmentRequestTypeFormField(departmentRequestTypeId, formData);
        Console.WriteLine($"response: {response}");
        if (response.Status)
        {
            Console.WriteLine($"response message: {response.Message}");
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
            MessageService.AlertType = "success";
            MessageService.AlertMessage = "Form Field added successfully";
        }
    }

    private async Task FetchDepartmentRequestType()
    {
        var response = await ApiService.GetSingleDepartmentRequestTypeById(departmentRequestTypeId);
        if (response != null) 
        {
            departmentRequestType = response;
            NavigationManager.NavigateTo(NavigationManager.Uri);
        }
    }

    private async Task FetchForm()
    {
        var response = await ApiService.FetchDepartmentRequestTypeFormFields(departmentRequestTypeId);
        if (response.Status)
        {
            departmentRequestTypeFormFields = response.formFields;
        }
    }

    private async Task PreviewForm()
    {
        isModalOpened = false;
        previewForm = true;
    }
    private async Task HandleLetterSettingsForm() {   
        await Task.Delay(1);
    }

    private Dictionary<string, object> AdditionalCardClass2 = new Dictionary<string, object>
    {
        {"class", "w-[500px] max-w-[700px] gap-4 p-4 border-2 bg-white"},
    };

}



