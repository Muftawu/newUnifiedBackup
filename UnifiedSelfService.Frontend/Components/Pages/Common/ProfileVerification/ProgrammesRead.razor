@page "/profile/programmes-read"
@attribute [Authorize]
@inject MessageService MessageService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApiService ApiService
@inject SISAPIService SISAPIService
@inject CookieService CookieService 
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager


<div class="">
    <h1 class="text-2xl font-bold mb-8 ml-28">Create Your Profile</h1>
    <div class="card max-w-6xl mx-auto p-6 bg-white rounded-lg shadow-sm">

        <div class="max-w-4xl mx-auto mb-24 flex flex-col justify-center items-center gap-2">
            <div class="flex items-center">
                <div class="w-8 h-8 rounded-full bg-green-600 text-white border-2 border-green-600 flex items-center justify-center">
                    1
                </div>
                <div class="h-[2px] w-60 md:w-48 bg-green-600 mx-2"></div>
                <div class="w-8 h-8 rounded-full flex bg-green-600 border-2 border-green-600 text-white items-center justify-center">
                    2
                </div>
                <div class="h-[2px] w-60 md:w bg-green-600 mx-2"></div>
                <div class="w-8 h-8 rounded-full flex bg-green-600 border-2 border-green-600 text-white items-center justify-center">
                    3
                </div>
                <div class="h-[2px] w-60 md:w bg-gray-300 mx-2"></div>
                <div class="w-8 h-8 rounded-full flex bg-white border-2 border-gray-300 text-green-600 items-center justify-center">
                    4
                </div>
            </div>
            <div class="flex justify-between items-center w-full">
                <span class="mr-8 text-[15px]">Personal Information</span>
                <span class="relative right-12 text-[15px]">Identification</span>
                <span class="mr-8 text-[15px]">Programme(s) Read</span>
                <span class="mr-8 text-[15px]">Review</span>
            </div>
        </div>

        <div class="max-w-5xl mx-auto">
        <form>
            <!-- Current Programme Form -->
            <div class="mb-10  p-6 rounded-lg shadow-sm">
                <h2 class="text-lg font-medium mb-6">1st Programme of Study with KNUST</h2>

                <div class="mb-6">
                    <label class="block mb-2">
                        Provide full name as shown on your school certificate / student ID card <span class="text-red-500">*</span>
                    </label>
                    <input type="text" class="w-full border-2 border-gray-300 rounded p-2.5" placeholder="John Doe" @bind="FullNameOnCertificate" />
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-32 mb-6">
                    <div>
                        <label class="block mb-2">
                            Student Number <span class="text-red-500">*</span>
                        </label>
                        <input type="text" class="w-full border-2 border-gray-300 rounded p-2.5" placeholder="5046950" @bind="StudentNumber" />
                    </div>
                    <div>
                        <label class="block mb-2">
                            Index Number <span class="text-red-500">*</span>
                        </label>
                        <input type="text" class="w-full border-2 border-gray-300 rounded p-2.5" placeholder="5046950" @bind="IndexNumber" />
                    </div>
                </div>

                <div class="text-sm text-[#2b5aaa] mb-6 bg-[#eef2fb] py-3 px-2 w-full  rounded-md flex justify-center items-center gap-2">
                    <i class='bx bxs-alarm-exclamation text-xl' style='color:#2b5aaa'  ></i>
                    Kindly select a programme of study that contains the suffix "IDL", "(Parallel)", "(Part-time)", etc if you pursued a programme in these options
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-32 mb-6">
                    <div>
                        <label class="block mb-2">
                            Graduate Type <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                            <select class="w-full border-2 border-gray-300 rounded p-2.5 appearance-none bg-white" @bind="GraduateType">
                                @foreach(var gtype in graduateTypes)
                                {
                                     <option value="@gtype.Name.ToString()">@gtype.Name.ToString()</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div>
                        <label class="block mb-2">
                            Programme of Study<span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                            <div class="flex gap-2">
                            <input type="search" class="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-1 focus:ring-green-500" placeholder="Search..." @bind="typedProgrammeName" @bind:event="oninput" />
                            <select class="w-full border-2 border-gray-300 rounded p-2.5 appearance-none bg-white" @bind="ProgrammeId">
                                @foreach(var program in FilteredProgrammes)
                                {
                                    <p>@program.Name</p>
                                    <option value="@program.ProgrammeId">@program.Name</option>
                                }
                            </select>
                        </div>
                        </div>
                    </div>

                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-32 mb-6">
                    <div>
                        <label class="block mb-2">
                            Admission Year <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                            <select class="w-full border-2 border-gray-300 rounded p-2.5 appearance-none bg-white" @bind="AdmissionYear">
                                <option value="">Select Year Admitted</option>
                                @for (int year = DateTime.Now.Year; year >= DateTime.Now.Year - 50; year--)
                                {
                                    <option value="@year">@year</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div>
                        <label class="block mb-2">
                            Graduation Year or Last Study Year <span class="text-red-500">*</span>
                        </label>
                        <div class="relative">
                            <select class="w-full border-2 border-gray-300 rounded p-2.5 appearance-none bg-white" @bind="GraduationYear">
                                <option value="">Select Year Graduated</option>
                                @for (int year = DateTime.Now.Year; year >= DateTime.Now.Year - 50; year--)
                                {
                                    <option value="@year">@year</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>

                @if (GraduateType == "Postgraduate" )
                {
                    <div class="mb-8">
                        <label class="block mb-2">
                            Thesis Topic <span class="text-red-500">*</span>
                        </label>
                        <input type="text" class="w-full border-2 border-gray-300 rounded p-2.5" placeholder="Postgraduate Thesis topic" @bind="ThesisTopic" />
                    </div>
                }
            </div>

            <!-- Previously Added Programmes -->
            @* @if (programmes.Count > 0) *@
            @* { *@
            @*     <div class="mt-8 mb-8"> *@
            @*         <h3 class="text-lg font-medium mb-4">Previously Added Programmes</h3> *@
                    
            @*         @foreach (var (programme, index) in programmes.Select((p, i) => (p, i))) *@
            @*         { *@
            @*             <div class="mb-6 p-4 border border-gray-200 rounded-lg bg-gray-50"> *@
            @*                 <div class="flex justify-between items-center mb-2"> *@
            @*                     <h4 class="font-medium"> Programme: @programme.ProgrammeId</h4> *@
            @*                     <button @onclick="() => EditProgramme(index)" class="text-blue-600 hover:text-blue-800"> *@
            @*                         Edit *@
            @*                     </button> *@
            @*                 </div> *@
            @*                 <div class="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm"> *@
            @*                     <div> *@
            @*                         <p><span class="font-medium">Name:</span> @programme.FullName</p> *@
            @*                         <p><span class="font-medium">Student Number:</span> @programme.StudentNumber</p> *@
            @*                         <p><span class="font-medium">Index Number:</span> @programme.IndexNumber</p> *@
            @*                     </div> *@
            @*                     <div> *@
            @*                         <p><span class="font-medium">Graduate Type:</span> @programme.GraduateType</p> *@
            @*                         <p><span class="font-medium">Admission Year:</span> @programme.AdmissionYear</p> *@
            @*                         <p><span class="font-medium">Graduation Year:</span> @programme.GraduationYear</p> *@
            @*                         @if (!string.IsNullOrEmpty(programme.ThesisTopic)) *@
            @*                         { *@
            @*                             <p><span class="font-medium">Thesis:</span> @programme.ThesisTopic</p> *@
            @*                         } *@
            @*                     </div> *@
            @*                 </div> *@
            @*             </div> *@
            @*         } *@
            @*     </div> *@
            @* } *@

            <div class="mb-8 flex justify-center mt-16">
                <button class="flex rounded-md items-center justify-center px-4 py-2  text-green-600 font-semibold ">
                    <span class="mr-2">+</span> Add Another Programme
                </button>
            </div>

            </form>
            <div class="flex justify-end gap-2">
                <button @onclick="NavigateToPrevious" class="px-4 py-2 border-2 border-green-700 text-green-700 rounded hover:bg-green-50 transition-colors">
                    Previous
                </button>

                <button @onclick="NavigateToProfileSummary" class="px-6 py-2 bg-green-700 text-white rounded hover:bg-green-800 transition-colors">
                    Next
                </button>
            </div>
        </div>
    </div>
</div>

@code {

    private int days = 3;
    private string? typedProgrammeName;
    private List<Programme> programmes = new();

    private string? FullNameOnCertificate;
    private string? StudentNumber;
    private string? IndexNumber;
    private string? ReferenceNumber;
    private string? ProgrammeId;
    private string? AdmissionYear;
    private string? GraduationYear;
    private string? GraduateType;
    private string? ThesisTopic;
    private List<GraduateTypeDTO> graduateTypes = new();

    protected override async Task OnInitializedAsync()
    {   
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        await FetchAllProgrammes();
        await FetchGraduateTypes();

        MessageService.AlertMessage = null;
        MessageService.AlertType = null;

        try
        {
            FullNameOnCertificate = await CookieService.Get("FullNameOnCertificate");
            StudentNumber = await CookieService.Get("StudentNumber");
            IndexNumber = await CookieService.Get("IndexNumber");
            ReferenceNumber = await CookieService.Get("ReferenceNumber");
            ProgrammeId = await CookieService.Get("ProgrammeId");
            AdmissionYear = await CookieService.Get("AdmissionYear");
            GraduationYear = await CookieService.Get("GraduationYear");
            GraduateType = await CookieService.Get("GraduateType");
            ThesisTopic = await CookieService.Get("ThesisTopic");
        } catch (Exception ex)
        {
            Console.WriteLine($"Error updating data from cache: {ex.Message}");
        }
    }

    private async Task FetchGraduateTypes()
    {
        var response = await SISAPIService.GetGraduateTypes();
        if (response.Status) graduateTypes = response.graduateTypes;
    }

    private async Task CacheProgrammeReadInfo () 
    {
        await CookieService.Set("FullNameOnCertificate", FullNameOnCertificate, days);
        await CookieService.Set("StudentNumber", StudentNumber, days);
        await CookieService.Set("IndexNumber", IndexNumber, days);
        await CookieService.Set("ReferenceNumber", ReferenceNumber, days);
        await CookieService.Set("ProgrammeId", ProgrammeId, days);
        await CookieService.Set("AdmissionYear", AdmissionYear, days);
        await CookieService.Set("GraduationYear", GraduationYear, days);
        await CookieService.Set("GraduateType", GraduateType, days);
        await CookieService.Set("ThesisTopic", ThesisTopic, days);
    }

    private int? editingIndex = null;

    private async Task NavigateToProfileSummary()
    {
        await CacheProgrammeReadInfo();
        NavigationManager.NavigateTo("/profile/profile-review");
    }

    private List<Programme> FilteredProgrammes => 
        string.IsNullOrWhiteSpace(typedProgrammeName)
            ? programmes 
            : programmes.Where(r => 
                (r.Name.ToString() ?? "").Contains(typedProgrammeName, StringComparison.OrdinalIgnoreCase)).ToList();


    private void NavigateToPrevious()
    {
        NavigationManager.NavigateTo("/profile/identification");
    }

    private async Task FetchAllProgrammes()
    {
        var response = await SISAPIService.GetAllProgrammes();
        if (response.Status)
        {
            programmes = response.programmes;
        }
    }

}
