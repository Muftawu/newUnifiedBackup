@page "/profile/personal-information"
@attribute [Authorize]
@inject MessageService MessageService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApiService ApiService
@inject SISAPIService SISAPIService 
@using System.ComponentModel.DataAnnotations
@inject CookieService CookieService

<h1 class="text-2xl font-bold mb-2 ml-24">Create Your Profile</h1>
<div class="flex items-center justify-center ml-24 text-center px-4 py-4">
    @if (!string.IsNullOrEmpty(MessageService.AlertMessage))
        {
            <div>
                <Alert Variant="@MessageService.AlertType" Title="@MessageService.AlertMessage" />
            </div>
        }
    </div>

<div class="card max-w-6xl mx-auto bg-white rounded-md p-8">
         
        <!-- Progress Steps -->
        <div class="max-w-4xl mx-auto mb-24 flex flex-col justify-center items-center gap-2 ">
                    <div class="flex items-center ">
                            <div class="w-8 h-8 rounded-full bg-green-600 text-white border-2 border-green-600  flex items-center justify-center">
                                1
                            </div>
                            <div class="h-[2px] w-60 md:w-48 bg-gray-300 mx-2"></div>
                            <div class="w-8 h-8 rounded-full   flex bg-white border-2  border-gray-300 text-green-600 items-center justify-center">
                                2
                            </div>
                            <div class="h-[2px] w-60 md:w bg-gray-300 mx-2"></div>
                            <div class="w-8 h-8 rounded-full   flex bg-white border-2  border-gray-300 text-green-600 items-center justify-center">
                                3
                            </div>
                            <div class="h-[2px] w-60 md:w bg-gray-300 mx-2"></div>
                            <div class="w-8 h-8 rounded-full   flex bg-white border-2  border-gray-300 text-green-600 items-center justify-center">
                                4
                            </div>
                    </div>
                        <div class="flex justify-between items-center w-full ">
                            <span class=" mr-8 text-[15px]">Personal Information</span>
                            <span class=" relative right-12 text-[15px] ">Identification</span>
                            <span class=" mr-8  text-[15px] ">Programme(s) Read</span>
                            <span class=" mr-8  text-[15px] "> Review</span>
                        </div>
        </div>

        <div class="mt-4">
            <form>
                <div class="flex items-center gap-12 mb-8">
                    
                    <div class="w-32 h-32 rounded-full overflow-hidden border mb-3">
                        <img src="/assets/images/profile.jpeg" alt="Profile Picture" class="w-full h-full object-cover" />
                    </div> 
                    <div>
                        <div>
                            <h4 class="text-md">Email</h4>
                            <p class="text-md">@(!string.IsNullOrEmpty(userEmail) ? userEmail : "email loading..")</p>
                        </div>
                    </div>
                   
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-x-44 gap-y-6 mb-8"> 
                    <div>
                        <label for="surname" class="block mb-1 font-medium">Surname <span class="text-red-500">*</span>
                        </label>
                        <InputText id="surname" @bind-Value="Surname"  class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" placeholder="Surname" />
                    </div>
                    
                    <div>
                        <label for="otherName" class="block mb-1 font-medium">Other Name <span class="text-red-500">*</span>
                        </label>
                        <InputText id="otherName" @bind-Value="OtherNames" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" placeholder="FirstName & OtherNames" />
                    </div>
                </div>

                 <div class="grid grid-cols-1 md:grid-cols-2 gap-x-44 gap-y-6 mb-8">
                    <div>
                        <label for="gender" class="block mb-1 font-medium">Gender <span class="text-red-500">*</span></label>
                        <InputSelect id="gender" @bind-Value="Gender" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md appearance-none pr-8">
                            <option value="">Select gender</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                        </InputSelect>
                    </div>
                    
                    <div>
                        <label for="dateOfBirth" class="block mb-1 font-medium">Date of Birth <span class="text-red-500">*</span></label>
                        <div class="flex gap-2">
                            <div class="relative flex-grow">
                                <InputDate id="dateOfBirth" @bind-Value="DateOfBirth" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" placeholder="Select date" />
                            </div>
                        </div>
                    </div>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-x-44 gap-y-6 mb-8">
                    <div>
                        <label for="dateOfBirth" class="block mb-1 font-medium">Country of Residence<span class="text-red-500">*</span></label>
                        <div class="flex gap-2">
                                <input type="search" class="w-full pl-10 pr-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-1 focus:ring-green-500" placeholder="Search..." @bind="CountryFilter" @bind:event="oninput" />
                            <InputSelect id="countryOfResidence" @bind-Value="CountryOfResidence" class="w-full px-3 h-11 border-2 border-gray-300 rounded-md appearance-none pr-8">
                                @foreach(var ccode in FilteredCountryOfResidence)
                                {
                                    <option value="@ccode.Name">@ccode.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div>
                        <label for="phoneNumber" class="block mb-1 font-medium">Phone Number<span class="text-red-500">*</span></label>
                        <InputText id="phoneNumber" @bind-Value="Phone" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" placeholder="+2335457856655" />
                    </div>
             </div>

                </form>
                <div class="flex justify-end mt-8">
                    <button @onclick="NavigateToIdentification" class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-6 rounded-md">
                        Next
                    </button>
                </div>
        </div>
</div>


@code {

    private string? userId;
    private string? userDepartmentId;
    private string? userType;
    private string? CountryFilter;
    private string? userEmail;
    private bool isProfileVerified = false;
    private int days = 3;

    private ClaimsPrincipal? _currentUser;
    private List<CountryDTO> countryCodes = new();

    @* cookie form state *@
    private string? Surname;
    private string? OtherNames;
    private string? Gender;
    private DateTime? DateOfBirth;
    private string? CountryOfResidence;
    private string? Phone;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUser = authState.User;
        userId = _currentUser.FindFirst("Sub")?.Value;
        userEmail = _currentUser.FindFirst("Email")?.Value;
        userDepartmentId = _currentUser.FindFirst("SubscribedDepartmentId")?.Value;
        userType = _currentUser.FindFirst("UserType")?.Value;
        bool.TryParse(_currentUser.FindFirst("IsProfileVerified")?.Value, out isProfileVerified);

        if (isProfileVerified)
        {
            NavigationManager.NavigateTo("/dashboard");
        }
        else
        {
            MessageService.AlertType = "warning";
            MessageService.AlertMessage = "You cannot make a request until you complete your verification phase";
        }
        
        await FetchAllCountries();
        try
        {
            Surname = await CookieService.Get("Surname");
            OtherNames = await CookieService.Get("OtherNames");
            Gender = await CookieService.Get("Gender");
            CountryOfResidence = await CookieService.Get("CountryOfResidence");
            Phone = await CookieService.Get("PhoneNumber");   
            var response = await CookieService.Get("DateOfBirth");
            DateTime.TryParse(response, out var dt);
            DateOfBirth = dt;
        }catch (Exception ex)
        {
            Console.WriteLine($"Error failed to read from cookies: {ex.Message}");
        }
    }

    private async Task CachePersonalInfo()
    {
        await CookieService.Set("Surname", Surname, days);
        await CookieService.Set("OtherNames", OtherNames, days);
        await CookieService.Set("Gender", Gender, days);
        await CookieService.Set("DateOfBirth", DateOfBirth.ToString(), days);
        await CookieService.Set("CountryOfResidence", CountryOfResidence, days);
        await CookieService.Set("PhoneNumber", Phone, days);
    }
   
    private async Task FetchAllCountries ()
    {
        var response = await SISAPIService.GetAllCountries();
        if (response.Status) countryCodes = response.countries;
    }

    private List<CountryDTO> FilteredCountryOfResidence=> 
        string.IsNullOrWhiteSpace(CountryFilter)
            ? countryCodes 
            : countryCodes.Where(r => 
                (r.Name.ToString() ?? "").Contains(CountryFilter, StringComparison.OrdinalIgnoreCase)).ToList();

    private async Task NavigateToIdentification ()
    {
        await CachePersonalInfo();
        NavigationManager.NavigateTo("/profile/identification");
    }
    
}
