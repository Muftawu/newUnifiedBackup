@page "/form-steps/{detailType}/{serviceId}"
@attribute [Authorize]
@inject MessageService MessageService
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApiService ApiService
@inject SISAPIService SISAPIService

<div class="min-h-auto">
 @if (!string.IsNullOrEmpty(MessageService.AlertMessage))
    {
        <div class="flex row justify-center items-center">
            <Alert Variant="@MessageService.AlertType" Title="@MessageService.AlertMessage" />
        </div>
    }

    <div class="mb-3 flex flex-row justify-between">
           @if (!string.IsNullOrEmpty(detailType) && requestType != null)
            {
                <h5 class="ml-24 text-2xl font-semibold text-gray-700 dark:text-gray-100 mb-2 mt-2">Add form steps for @requestType.Name</h5>
                @if (string.Equals(userObj.userType, "Developer"))
                {
                <button @onclick="showNewFormStepModal"
                    class="mx-4 block py-2 font-bold text-white border-transparent hover:bg-actionPrimary-hover btn bg-actionPrimary-default focus:ring focus:ring-actionPrimary-active/30 dark:border-actionPrimary-default">Add new step</button>
                }
            }
    </div>

@if (newStepModalStatus)
{
    <div class="max-w-4xl mx-auto p-6 h-auto py-4 bg-white rounded-xl shadow-lg mb-4">
        <div class="max-w-2xl mx-auto">
            <!-- Progress Steps -->
            <div class="flex flex-row justify-center items-center gap-2 mb-4">
                    <div class="flex justify-between items-center w-full mt-4 gap-2">
                        <span style="font-size: 20px;">Create form steps here</span>
                    </div>
            </div>

                    <div class="flex row justify-between"></div>
                          <div class="max-w-2xl mx-auto mb-12 flex flex-col justify-center items-center gap-2"></div>
                        
                            <div class="mb-8">
                            </div>
                            
                            <div class="mt-4">
                                    <form enctype="multipart/form-data">

                                    <div class="grid grid-cols-1 md:grid-cols-1 gap-x-20 gap-y-6 mb-8"> 
                                            <div>
                                                <label for="type" class="block mb-1 font-medium">Step Name<span class="text-red-500">*</span></label>
                                                <InputText id="text" @bind-Value="newFormStep.StepNumber" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                                            </div>
                                     </div>
                                    <div class="grid grid-cols-1 md:grid-cols-1 gap-x-20 gap-y-6 mb-8"> 
                                            <div>
                                                <label for="label" class="block mb-1 font-medium">Step Description<span class="text-red-500">*</span></label>
                                                <InputText id="text" @bind-Value="newFormStep.StepDescription" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                                            </div>
                                     </div>

                                    </form>

                                <div class="flex justify-around mt-8">
                                    <button type="button" @onclick="AddNewFormStep" class="block w-40 py-2 text-white border-transparent hover:bg-actionPrimary-hover btn bg-actionPrimary-default focus:ring focus:ring-actionPrimary-active/30 dark:border-actionPrimary-default">
                                     Save Step 
                                    </button>
                                </div>
                                
                                <div class="flex justify-end mt-8">
                                    <button type="button" @onclick="showNewFormStepModal" class="block w-40 py-2 text-gray border-green hover:bg-actionPrimary-hover btn bg-actionPrimary focus:ring focus:ring-actionPrimary-active/30 dark:border-actionPrimary-default">
                                   Cancel 
                                    </button>
                                </div>

                            </div>
        </div>
</div>
}


@if (!newStepModalStatus)
{
    <div class="max-w-4xl mx-auto p-6 h-auto py-4 bg-white rounded-xl shadow-lg">
        <div class="max-w-2xl mx-auto">
            <!-- Progress Steps -->
            <div class="flex flex-row justify-center items-center gap-2 mb-4">
                    <div class="flex justify-between items-center w-full mt-4 gap-2">
                        <span class="text-[28px]">Please select a step to add fields</span>
                        @if (serviceRequestTypeFormSteps !=  null)
                        {  
                            <span class="text-[28px]">Added steps: @serviceRequestTypeFormSteps.Count()</span>
                        }
                    </div>
            </div>

            @if (string.Equals(detailType, "request-types"))
            {
                    <div class="flex row justify-between">
                          @* <h4 class="flex row justify-start items-start mb-8">Generate Input Form</h4> *@
                          @* <h2 class="mx-4 cursor-pointer" @onclick="toggleModal">X</h2> *@
                        </div>
                          <div class="max-w-2xl mx-auto mb-12 flex flex-col justify-center items-center gap-2"></div>
                        
                            <div class="mb-8">
                            </div>
                            
                            <div class="mt-4">
                                    <form enctype="multipart/form-data">

                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-20 gap-y-6 mb-8"> 
                                            <div>
                                                <label for="type" class="block mb-1 font-medium">Select step<span class="text-red-500">*</span></label>
                                                <select @bind="newFormStep.StepNumber" class="w-full py-3 text-sm border-gray-200 rounded-lg placeholder:text-sm placeholder:text-gray-300 bg-gray-50/5 dark:bg-zinc-700/50 dark:border-zinc-500 dark:focus:border-zinc-300 dark:text-gray-100 dark:placeholder:text-zinc-100/60 focus:border-actionPrimary-active">
                                                    <option>---</option>
                                                    @if (serviceRequestTypeFormSteps != null)
                                                    {
                                                        @foreach(var option in serviceRequestTypeFormSteps)
                                                        {
                                                            <option value="@option.RequestTypeFormStepId">@option.StepNumber: @option.StepDescription</option>
                                                        }
                                                    }
                                               </select>
                                            </div>

                                            <div>
                                                <label for="type" class="block mb-1 font-medium">Field Type<span class="text-red-500">*</span></label>
                                                <select @bind="newFormField.Type" class="w-full py-3 text-sm border-gray-200 rounded-lg placeholder:text-sm placeholder:text-gray-300 bg-gray-50/5 dark:bg-zinc-700/50 dark:border-zinc-500 dark:focus:border-zinc-300 dark:text-gray-100 dark:placeholder:text-zinc-100/60 focus:border-actionPrimary-active">
                                                    <option>---</option>
                                                    @foreach(InputTypesEnum option in Enum.GetValues(typeof(InputTypesEnum)))
                                                    {
                                                        <option value="@option">@option</option>
                                                    }
                                               </select>
                                            </div>

                                     </div>

                                        @if (string.Equals(newFormField.Type, "select"))
                                        {
                                            @for (int i=1; i<optionCounter; i++)
                                            {
                                                <div class="grid grid-cols-1 md:grid-cols-1 gap-x-20 gap-y-6 mb-8"> 
                                                        <div>
                                                            <label for="label" class="block mb-1 font-medium">Option [Added = @(optionCounter-1)]<span class="text-red-500">*</span></label>
                                                            <InputText @bind-Value="selectOptionBindValues[i]" id="@($"option_{i}")" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                                                        </div>
                                                 </div>
                                            }
                                            <a style="text-decoration: underline; color: blue; display: flex; flex-direction: row; justify-content: end" @onclick="IncreaseOptionCounter">Add New Option</a>
                                        }else{
                                        <div class="grid grid-cols-1 md:grid-cols-2 gap-x-20 gap-y-6 mb-8"> 
                                             <div>
                                                <label for="label" class="block mb-1 font-medium">Label<span class="text-red-500">*</span></label>
                                                <InputText id="text" @bind-Value="newFormField.Label"  class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                                            </div>
                                            <div>
                                                <label for="isRequired" class="block mb-1 font-medium">Is Required<span class="text-red-500">*</span></label>
                                                    <select @bind="newFormField.IsRequired" class="w-full py-3 text-sm border-gray-200 rounded-lg placeholder:text-sm placeholder:text-gray-300 bg-gray-50/5 dark:bg-zinc-700/50 dark:border-zinc-500 dark:focus:border-zinc-300 dark:text-gray-100 dark:placeholder:text-zinc-100/60 focus:border-actionPrimary-active">
                                                    <option value="true">Yes</option>
                                                    <option value="false">No</option>
                                                    </select>
                                            </div>
                                     </div>
                                    } 
                                    
                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-x-20 gap-y-6 mb-8"> 
                                            <div>
                                                <label for="label" class="block mb-1 font-medium">Placeholder<span class="text-red-500">*</span></label>
                                                <InputText id="text" @bind-Value="newFormField.Placeholder"  class="w-full px-3 py-2 border-2 border-gray-300 rounded-md" />
                                            </div>
                                             <div>
                                                <label for="label" class="block mb-1 font-medium">Width<span class="text-red-500">*</span></label>
                                                <InputSelect @bind-Value="newFormField.Width" class="w-full py-3 text-sm border-gray-200 rounded-lg placeholder:text-sm placeholder:text-gray-300 bg-gray-50/5 dark:bg-zinc-700/50 dark:border-zinc-500 dark:focus:border-zinc-300 dark:text-gray-100 dark:placeholder:text-zinc-100/60 focus:border-actionPrimary-active">
                                                <option value="25">25%</option>
                                                <option value="50">50%</option>
                                                <option value="100">100%</option>
                                            </InputSelect>
                                            </div>

                                     </div>

                                    </form>

                                <div class="flex justify-around mt-8">
                                    <button type="button" @onclick="AddField" class="block w-40 py-2 text-white border-transparent hover:bg-actionPrimary-hover btn bg-actionPrimary-default focus:ring focus:ring-actionPrimary-active/30 dark:border-actionPrimary-default">
                                      Add Field 
                                    </button>
                                </div>

                                <div class="flex justify-end mt-8">
                                    <button type="button" @onclick="NavigateToDashboard" class="block w-40 py-2 text-gray border-green hover:bg-actionPrimary-hover btn bg-actionPrimary focus:ring focus:ring-actionPrimary-active/30 dark:border-actionPrimary-default">
                                    Done 
                                    </button>
                                </div>

                            </div>
                }
        </div>
</div>
}
</div>

@code {

    [Parameter] public string? detailType { get; set; }
    [Parameter] public string? serviceId { get; set; }

    private RequestType requestType = new();
    private UserObj userObj = new(); 
    private NewFormField newFormField = new();
    private NewFormStep newFormStep = new();
    private User? user = new();
    private RequestTypeDTO newRequestTypeModel = new();
    private List<string> selectOptionBindValues = new();
    private List<RequestTypeFormStep> serviceRequestTypeFormSteps = new(); 

    private string? userDepartmentId;
    private bool isLoading = false;

    private bool previewForm = false;
    private bool newStepModalStatus = false;
    @* private string formStepId = string.Empty; *@
    private string serviceTypeId = string.Empty;
    private string formView = "newDeveloperRequestType";
    private int optionCounter = 2;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        userObj._currentUser = authState.User;
        userObj.userId = userObj._currentUser.FindFirst("Sub")?.Value;
        userObj.userEmail = userObj._currentUser.FindFirst("Email")?.Value;
        userObj.userType = userObj._currentUser.FindFirst("UserType")?.Value;
        
        await FetchAvailableSteps();
        await GetServiceTypeDetails();
        await populateSelectOptionBindValues();
        
        MessageService.AlertType = null;
        MessageService.AlertMessage = null;
    }

    private async Task GetServiceTypeDetails()
    {
        if (string.Equals(detailType, "request-types"))
        {
            requestType = await ApiService.GetRequestTypeById(serviceId.ToString());
        }
    }

    private async Task populateSelectOptionBindValues()
    {
        for (int i=0; i<optionCounter; i++) 
        {
            selectOptionBindValues.Add($"New Option"); 
        }
    }

    private async Task FetchAvailableSteps()
    {
       var response = await ApiService.FetchServiceFormSteps(serviceId ?? "");
       if (response.Status)
       {
            serviceRequestTypeFormSteps = response.requestTypeFormSteps;
            Console.WriteLine($"all service form steps: {serviceRequestTypeFormSteps}");
       }
    }

    private async Task AddNewFormStep()
    {
        var data = new List<RequestTypeFormStepDTO>()
        {
            new RequestTypeFormStepDTO {
                StepNumber = newFormStep.StepNumber,
                StepDescription = newFormStep.StepDescription
            }
        };

        var response = await ApiService.AddFormStep(serviceId, data);
        if (response.Status)
        {
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
            MessageService.AlertMessage = "Form step added successfully";
            MessageService.AlertType = "success";
        }else{
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
            MessageService.AlertMessage = "Failed to add form step";
            MessageService.AlertType = "danger";
        }
    }

    private async Task AddField()
    {
        FormFieldWithOptionsDTO formData = new();
        if (string.Equals(newFormField.Type, "select"))
        {
            var formfieldDTO = new FormFieldDTO()
            {
                Label = newFormField.Label,
                InputType = newFormField.Type,
                Placeholder = newFormField.Placeholder,
                IsRequired = string.Equals(newFormField.IsRequired, "true") ? true : false,
                Width = newFormField.Width
            };
            
            var formselectoptionsDTO = new List<FormSelectOptionDTO>()
            {
                new FormSelectOptionDTO
                {
                    OptionName = ""
                }
            };

            formData.SelectOptions = formselectoptionsDTO;

        } else {
            var formfieldDTO = new FormFieldDTO()
            {
                Label = newFormField.Label,
                InputType = newFormField.Type,
                Placeholder = newFormField.Placeholder,
                IsRequired = string.Equals(newFormField.IsRequired, "true") ? true : false,
                Width = newFormField.Width
            };

            formData.FormField = formfieldDTO;
        }

        var response = await ApiService.AddGenericServiceFormField(newFormStep.StepNumber ?? "", formData);
        if (response.Status)
        {
            MessageService.AlertType = "success";
            MessageService.AlertMessage = "Form Field added successfully. Please add another or click Done to exit.";
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
            MessageService.AlertType = "success";
            MessageService.AlertMessage = "Form field successfully added";
        }else
        {
            MessageService.AlertType = "danger";
            MessageService.AlertMessage = "An error occured. Please try again later.";
        }
    }

    private async Task GetUserProfile()
    {
        var response = await ApiService.GetUserById(userObj.userId ?? "");
        user = response;
    }

    private async Task IncreaseOptionCounter()
    {
       optionCounter++; 
       await populateSelectOptionBindValues();
    }

    private void NavigateToDashboard()
    {
        NavigationManager.NavigateTo($"dev/request-types/details/{serviceId}", true);
    }

    private void showNewFormStepModal()
    {
       newStepModalStatus = !newStepModalStatus;  
    }

    private Dictionary<string, object> AdditionalCardClass2 = new Dictionary<string, object>
    {
        {"class", "w-[500px] max-w-[700px] gap-4 p-4 border-2 bg-white"},
    };

    private void showNewFormField()
    {
       formView = "addGenericFormFields"; 
    }

    private async Task NavigateToLetterDashboard()
    {
        NavigationManager.NavigateTo($"dev/request-types/details/{serviceTypeId}", true);
    }

}
